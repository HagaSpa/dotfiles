name: Test Scripts

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up environment
      run: |
        # Create test directories
        mkdir -p ~/.config/zsh
        mkdir -p ~/.config/karabiner/assets/complex_modifications
        mkdir -p ~/.config/ghostty
        
        # Backup existing files if they exist
        for file in ~/.zshrc ~/.vimrc; do
          if [ -f "$file" ]; then
            cp "$file" "${file}.github-backup"
          fi
        done
    
    - name: Test install.sh (actual execution)
      run: |
        set -e
        
        echo "Testing install.sh with actual execution..."
        
        # Check if script is executable
        if test -x ./install.sh; then
          echo "✓ install.sh is executable"
        else
          echo "✗ install.sh is not executable"
          exit 1
        fi
        
        # Validate script syntax
        if bash -n ./install.sh; then
          echo "✓ install.sh syntax is valid"
        else
          echo "✗ install.sh has syntax errors"
          exit 1
        fi
        
        # Check if Homebrew is already available in CI
        if command -v brew &> /dev/null; then
          echo "✓ Homebrew is already available in CI environment"
          brew --version
        else
          echo "ℹ️  Homebrew not pre-installed, would be installed by script"
        fi
        
        # Create a CI-safe version of install.sh for testing
        echo "Creating CI-safe test version..."
        cat > install-test.sh << 'SCRIPT_EOF'
        #!/bin/sh
        
        # Get the script directory to ensure correct paths
        SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
        
        # Check if Homebrew is already installed
        if command -v brew &> /dev/null; then
          echo "✓ Homebrew already available, skipping installation"
          eval "$(/opt/homebrew/bin/brew shellenv)" 2>/dev/null || true
        else
          echo "Installing Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> $HOME/.zprofile
          
          # Source brew environment if it exists
          if [ -f "/opt/homebrew/bin/brew" ]; then
              eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
        fi
        
        # install via brew using absolute path to Brewfile
        echo "Installing packages from Brewfile..."
        brew bundle install --file="$SCRIPT_DIR/Brewfile"

        # Install nvm (Node Version Manager)
        echo "Installing nvm..."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

        # Load nvm for current session
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

        # Install latest LTS version of Node.js
        echo "Installing latest LTS version of Node.js..."
        nvm install --lts
        nvm use --lts

        # Install global npm packages
        echo "Installing Claude Code and Gemini CLI..."
        npm install -g @anthropic-ai/claude-code
        npm install -g @google/gemini-cli       

        # Skip Google Cloud CLI installation in CI (it's large and not essential for testing)
        echo "Skipping Google Cloud CLI installation in CI environment"
        echo "✓ install.sh test execution completed"
        SCRIPT_EOF

        chmod +x install-test.sh
        
        echo "Test script content:"
        cat install-test.sh
        
        echo "Executing test installation..."
        ./install-test.sh
        
        # Verify that key tools are available after installation
        echo "Verifying installed CLI tools..."
        for tool in fzf gh zoxide lsd bat starship; do
          if command -v "$tool" &> /dev/null; then
            echo "✓ CLI tool successfully installed: $tool"
            "$tool" --version 2>/dev/null || echo "  (version check failed, but command exists)"
          else
            echo "⚠️  CLI tool not available: $tool"
          fi
        done

        # Verify Node.js and npm installation
        echo "Verifying Node.js and npm installation..."
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        
        if command -v node &> /dev/null; then
          echo "✓ Node.js successfully installed: $(node --version)"
        else
          echo "⚠️  Node.js not available"
        fi
        
        if command -v npm &> /dev/null; then
          echo "✓ npm successfully installed: $(npm --version)"
        else
          echo "⚠️  npm not available"
        fi
        
        # Verify npm global packages
        echo "Verifying npm global packages..."
        if command -v claude-code &> /dev/null; then
          echo "✓ Claude Code successfully installed: $(claude-code --version 2>/dev/null || echo 'command exists')"
        else
          echo "⚠️  Claude Code not available"
        fi
        
        if command -v gemini &> /dev/null; then
          echo "✓ Gemini CLI successfully installed: $(gemini --version 2>/dev/null || echo 'command exists')"
        else
          echo "⚠️  Gemini CLI not available"
        fi
                
        # Verify cask applications (these won't be in PATH but should be installed)
        echo "Checking cask applications..."
        if brew list --cask | grep -q ghostty; then
          echo "✓ Cask application installed: ghostty"
        else
          echo "ℹ️  Cask application not installed or not available in CI: ghostty"
        fi
        
        # Test that brew bundle check now passes
        echo "Testing brew bundle check after installation..."
        if brew bundle check --file=./Brewfile; then
          echo "✓ All Brewfile dependencies are now satisfied"
        else
          echo "ℹ️  Some dependencies still missing (may be expected)"
        fi
        
        # Cleanup
        rm -f install-test.sh
        
        echo "✓ install.sh actual execution test completed successfully"
    
    - name: Test link.sh
      run: |
        # Check if script is executable
        test -x ./link.sh
        
        # Validate script syntax
        bash -n ./link.sh
        
        # Test symbolic link creation (in safe mode)
        export DRY_RUN=true
        ./link.sh || true
        
        # Verify all source files exist
        while IFS=':' read -r source target; do
          if [ -f "$source" ]; then
            echo "✓ Source file exists: $source"
          else
            echo "✗ Missing source file: $source"
            exit 1
          fi
        done <<< "$(grep -E '^\s*"[^"]+:[^"]+"\s*$' link.sh | sed 's/[" ]//g')"
    
    - name: Test configuration files
      run: |
        # Check shell configurations
        test -f .zshrc
        test -f .config/zsh/alias.sh
        test -f .config/zsh/command.sh
        echo "✓ Shell configuration files exist"
        
        # Check vim configuration
        test -f .vimrc
        echo "✓ Vim configuration exists"
        
        # Check Karabiner configuration
        test -f .config/karabiner/assets/complex_modifications/personal_hagaspa.json
        echo "✓ Karabiner configuration exists"
        
        # Check Ghostty configuration
        test -f .config/ghostty/config
        echo "✓ Ghostty configuration exists"
        
        # Validate JSON files
        python3 -m json.tool .config/karabiner/assets/complex_modifications/personal_hagaspa.json > /dev/null
        echo "✓ Karabiner JSON is valid"
    
    - name: Test Brewfile
      run: |
        set -e
        
        echo "Testing Brewfile validity..."
        
        # Check if Brewfile exists
        if test -f ./Brewfile; then
          echo "✓ Brewfile found"
        else
          echo "✗ Brewfile not found"
          exit 1
        fi
        
        # Validate Brewfile syntax by parsing it
        echo "Checking Brewfile syntax..."
        if grep -E '^(brew|cask|mas)' ./Brewfile > /dev/null; then
          echo "✓ Brewfile contains valid entries"
        else
          echo "✗ Brewfile appears to be empty or invalid"
          exit 1
        fi
        
        # Check for essential tools in Brewfile
        echo "Checking for essential CLI tools..."
        essential_tools=("fzf" "gh" "zoxide")
        for tool in "${essential_tools[@]}"; do
          if grep -q "brew \"$tool\"" ./Brewfile; then
            echo "✓ Found essential CLI tool: $tool"
          else
            echo "⚠️  Essential CLI tool not found in Brewfile: $tool"
          fi
        done
        
        # Check for cask applications in Brewfile
        echo "Checking for cask applications..."
        if grep -q "cask \"ghostty\"" ./Brewfile; then
          echo "✓ Found cask application: ghostty"
        else
          echo "⚠️  Ghostty cask not found in Brewfile"
        fi
        
        # If brew is available, test bundle validation (but don't fail on missing packages)
        if command -v brew &> /dev/null; then
          echo "Homebrew is available, testing bundle check..."
          if brew bundle check --file=./Brewfile; then
            echo "✓ All Brewfile dependencies are satisfied"
          else
            echo "ℹ️  Some packages not installed (expected in CI environment)"
            echo "   This is normal - CI doesn't pre-install all development tools"
          fi
        else
          echo "ℹ️  Homebrew not available in this environment"
        fi
        
        echo "✓ Brewfile validation completed"
    
    - name: Cleanup
      if: always()
      run: |
        # Restore backed up files
        for file in ~/.zshrc ~/.vimrc; do
          if [ -f "${file}.github-backup" ]; then
            mv "${file}.github-backup" "$file"
          fi
        done
        
        # Remove any test symlinks that might have been created
        for link in ~/.zshrc ~/.vimrc ~/.config/zsh/alias.sh ~/.config/zsh/command.sh; do
          if [ -L "$link" ]; then
            rm "$link"
          fi
        done
